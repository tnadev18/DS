# -*- coding: utf-8 -*-
"""ds_practical_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vgZ1oaWvNKwd36lbijC8lszXU8ishH-q
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv('datasets/Social_Network_Ads.csv')
df

df.isnull().sum()

df.drop(['User ID'],axis=1,inplace=True)

df = df.replace("Female",0)
df = df.replace("Male",1)
df

df.Purchased.value_counts()

corr = df.corr()
plt.figure(figsize=(4,4))
sns.heatmap(corr, annot=True, cmap='Blues')

X= df.drop(['Purchased'],axis=1)
Y= df['Purchased']
X.head()

# Normalize the data using Min Max Normalization or any other technique
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state = 42)
X_scaled= scaler.fit_transform(X_train)
x_scaled_test= scaler.fit_transform(X_test)
print("Training and testing split was successful.")

model= LogisticRegression()
model.fit(X_scaled,y_train)
y_predict= model.predict(x_scaled_test)
print("accuracy:", model.score(x_scaled_test,y_test)*100)

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test,y_predict)
print(cm)

from sklearn.metrics import precision_recall_fscore_support
prf= precision_recall_fscore_support(y_test,y_predict)
print('precision:',prf[0])
print('Recall:',prf[1])
print('fscore:',prf[2])
print('support:',prf[3])

from sklearn.metrics import classification_report
cr= classification_report(y_test,y_predict)
print(cr)

custom_input = [[1, 20, 20000]]

campaign = scaler.transform(custom_input)

custom_predictions = model.predict(campaign)
print(custom_predictions)